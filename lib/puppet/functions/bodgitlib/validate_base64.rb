# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# validate_base64.rb
#

require 'base64'

# ---- original file header ----
#
# @summary
#       Validate that all passed values are base64-encoded strings. Abort
#    catalog compilation if any value fails this check.
#
#
Puppet::Functions.create_function(:'bodgitlib::validate_base64') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    raise(Puppet::ParseError, 'validate_base64(): Wrong number of ' +
      "arguments given (#{arguments.size} for 1)") if arguments.size != 1

    item = arguments[0]

    unless item.is_a?(Array)
      item = [item]
    end

    if item.size == 0
      raise(Puppet::ParseError, 'validate_base64(): Requires an array ' +
        'with at least 1 element')
    end

    item.each do |i|
      unless i.is_a?(String)
        raise(Puppet::ParseError, 'validate_base64(): Requires either an ' +
          'array or string to work with')
      end

      encoded = i.gsub(/\s+/, '') # Remove any whitespace or linebreaks
      decoded = Base64.decode64(encoded)
      recoded = Base64.encode64(decoded).gsub(/\s+/, '') # encode64 will add linebreaks
      unless encoded.eql?(recoded)
        raise(Puppet::ParseError, "#{i.inspect} is not a Base64-encoded string")
      end
    end
  
  end
end
